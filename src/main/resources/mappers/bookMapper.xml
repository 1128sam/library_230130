<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.library.main.dao.BookDAO">
<select id="selectBookList" resultType="com.library.main.model.Book">
	select * from `book` ORDER BY `id` DESC
</select>

<select id="selectBookListBySearchSearchType" resultType="com.library.main.model.Book">
	SELECT
		`id`
		, `isbn`
		, `title`
		, `author`
		, `publisher`
		, `year`
		, `imageUrl`
		, `category`
		, `status`
		, `count`
		, `point`
		, `createdAt`
		, `updatedAt`
	FROM
		`book`
	WHERE
		<if test='searchType != "general"'>
		<if test='searchType == "title"'> 
			`title`
		</if>
		<if test='searchType == "author"'> 
			`author`
		</if>
		<if test='searchType == "publisher"'> 
			`publisher`
		</if>
		<if test='searchType == "issn"'> 
			`isbn`
		</if>
		LIKE CONCAT('%', #{search}, '%')
		</if>
		<if test='searchType == "general"'>
			`title` LIKE CONCAT('%', #{search}, '%') OR `author` LIKE CONCAT('%', #{search}, '%') OR `publisher` LIKE CONCAT('%', #{search}, '%') OR `isbn` LIKE CONCAT('%', #{search}, '%') OR `title` LIKE CONCAT('%', #{search}, '%')
		</if>
		order by `updatedAt` DESC
</select>

<select id="selectBookListByCat" resultType="com.library.main.model.Book">
	SELECT
		`id`
		, `isbn`
		, `title`
		, `author`
		, `publisher`
		, `year`
		, `imageUrl`
		, `category`
		, `status`
		, `count`
		, `point`
		, `createdAt`
		, `updatedAt`
	FROM
		`book`
	WHERE
		`category` = #{category}
</select>

<select id="selectBookByBookId" parameterType="int" resultType="com.library.main.model.Book">
	SELECT
		`id`
		, `isbn`
		, `title`
		, `author`
		, `publisher`
		, `year`
		, `imageUrl`
		, `category`
		, `status`
		, `count`
		, `point`
		, `createdAt`
		, `updatedAt`
	FROM
		`book`
	WHERE
		`id` = #{id}
</select>

<insert id="insertBook" parameterType="map">
	INSERT INTO `book`
		(
			`isbn`
			, `title`
			, `author`
			, `publisher`
			, `year`
			, `imageUrl`
			, `category`
			, `status`
			, `count`
			, `point`
			, `createdAt`
			, `updatedAt`
		)
	VALUES
		(
			#{isbn}
			, #{title}
			, #{author}
			, #{publisher}
			, #{year}
			, #{filePath}
			, #{category}
			, 0
			, 0
			, 0
			, NOW()
			, NOW()
		)
</insert>

<insert id="insertRentInfoByUserIdBookId" parameterType="map">
	INSERT INTO `book_status`
		(
			`userId`
			, `bookId`
			, `borrowedAt`
			, `dueDate`
			, `exCount`
			, `returnedAt`
			, `point`
			, `createdAt`
			, `updatedAt`
		)
	VALUES
		(
			#{userId}
			, #{bookId}
			, NOW()
			, DATE_ADD(NOW() , INTERVAL 14 DAY)
			, 0
			, NULL
			, NULL
			, NOW()
			, NOW()
		)
</insert>

<update id="updateBookStatusAs1" parameterType="int">
	UPDATE `book`
		SET `status` = 1
	WHERE `id` = #{bookId}
</update>
<update id="updateBookStatusAs2" parameterType="int">
	UPDATE `book`
		SET `status` = 2
	WHERE `id` = #{bookId}
</update>

<select id="selectBookStatusByBookId" parameterType="int" resultType="com.library.main.model.BookStatus">
	SELECT * FROM `book_status`
			WHERE `bookId` = #{bookId} AND `returnedAt` is null
</select>
<select id="selectNextRegisteredBookByBookId" parameterType="int" resultType="com.library.main.model.BookRegister">
	SELECT * FROM `book_register`
		WHERE `bookId` = #{bookId} AND `informedAt` is null ORDER BY `createdAt` DESC LIMIT 1 
</select>

<update id="returnBookByBookId" parameterType="map">
	UPDATE `book`
		SET `status` = 0, `count` = `count` + 1, `updatedAt` = NOW()
		<if test="point != 0">
			, `point` = (`point`*(`count`-1) + #{point}) / `count`
		</if>
	WHERE `id` = #{bookId}
</update>
<update id="updateBookStatusAsReturned" parameterType="int">
	UPDATE `book_status`
		SET `returnedAt` = NOW(), `updatedAt`=NOW()
	WHERE `bookId` = #{bookId}
</update>

<select id="selectBookIdListByUserId" parameterType="int" resultType="Integer">
	SELECT
		`bookId`
	FROM
		`book_status`
	WHERE
		<if test="userId1 != 0">
			`userId` = #{userId1}
			AND `returnedAt` is null
		</if>
		<if test="userId2 != 0">
			`userId` = #{userId2}
			AND `returnedAt` is not null ORDER BY `returnedAt` DESC
		</if>
</select>

<select id="selectBorrowedBookCntByUserId" parameterType="int" resultType="int">
	SELECT COUNT(*) FROM `book_status` WHERE `userId` = #{userId} AND `returnedAT` IS NULL
</select>
<select id="selectRegisteredBookCntByUserId" parameterType="int" resultType="int">
	SELECT COUNT(*) FROM `book_register` WHERE `userId` = #{userId}
</select>

<select id="selectDueDateByBookId" parameterType="map" resultType="date">
	SELECT `dueDate` FROM `book_status` WHERE `bookId` = #{bookId} AND `returnedAT` IS NULL AND `userId` = #{userId} limit 3
</select>

<select id="selectOverdueBookStatusByBookId" parameterType="map" resultType="com.library.main.model.BookStatus">
	SELECT 
		`id`
		, `userId`
		, `bookId`
		, `borrowedAt`
		, `dueDate`
		, `exCount`
		, `returnedAt`
		, `point`
		, `createdAt`
		, `updatedAt`
	FROM `book_status`
		WHERE `returnedAt` is null
		<if test="tmp == 0">
			 AND `dueDate` <![CDATA[ < ]]> NOW()
		</if>
</select>

<select id="selectOverdueBookStatusByUserId" parameterType="int" resultType="com.library.main.model.BookStatus">
	SELECT * FROM `book_status`
		WHERE `returnedAt` is null AND `userId` = #{userId}
</select>

<select id="selectOverdueBookStatus" resultType="com.library.main.model.BookStatus">
	SELECT * FROM `book_status`
		WHERE `returnedAt` is null AND `dueDate` <![CDATA[ < ]]> NOW()
</select>

<insert id="registerBookByUserIdBookId" parameterType="map">
	INSERT INTO `book_register`
		(
			`userId`,
			`bookId`,
			`informedAt`,
			`createdAt`
		)
	VALUES
		(
			#{userId}
			, #{bookId}
			, NULL
			, NOW()
		)
</insert>

<!-- <select id="selectRegisteredBookListByBookId" parameterType="int" resultType="com.library.main.model.BookRegister">
	SELECT * FROM `book_register`
		WHERE `bookId` = #{bookId} ORDER BY `createdAt` LIMIT 1
</select> -->

<delete id="deleteRegisteration" parameterType="map">
	DELETE FROM `book_register`
		WHERE `userId` = #{userId} AND `bookId` = #{bookId} ORDER BY `createdAt` LIMIT 1
</delete>

<update id="updateBookRegisterByUserIdBookId" parameterType="map">
	UPDATE `book_register`
		SET `informedAt` = NOW()
	WHERE `userId` = #{userId} AND `bookId` = #{bookId}
</update>

<select id="selectRegisteredBookListByBookId" parameterType="int" resultType="com.library.main.model.BookRegister">
	SELECT * FROM `book_register`
		WHERE `bookId` = #{bookId}
</select>

<select id="selectRegisteredBookListByUserId" parameterType="int" resultType="com.library.main.model.BookRegister">
	SELECT * FROM `book_register`
		WHERE `userId` = #{userId}
</select>

<select id="selectRegisteredBookListPassedDate" resultType="com.library.main.model.BookRegister">
	SELECT * FROM `book_register`
		WHERE DATE_ADD(`informedAt`, INTERVAL 3 DAY) <![CDATA[ < ]]> NOW()
</select>

<select id="selectRegisteredBookCountByBookId" parameterType="int" resultType="int">
	SELECT COUNT(*) FROM `book_register`
		WHERE `bookId` = #{bookId`} 
</select>

<select id="selectBookStatus1Week" resultType="com.library.main.model.BookStatus">
	SELECT * FROM `book_status`
		WHERE `dueDate` = DATE_ADD(DATE_FORMAT(now(), '%Y-%m-%d'), INTERVAL 7 DAY)
</select>

<select id="selectBookStatusListOrderByReturnedAt5" resultType="com.library.main.model.BookStatus">
	SELECT * FROM `book_status`
		WHERE `returnedAt` is not null GROUP BY `bookId` ORDER BY `returnedAt` DESC LIMIT 5
</select>

<select id="selectBookOrderByCount5" parameterType="int" resultType="com.library.main.model.Book">
	SELECT * FROM `book`
		<if test="type == 0">
			ORDER BY `count`
		</if>
		<if test="type == 1">
			WHERE `count` > 1
			ORDER BY `point`
		</if>
		DESC LIMIT 5
</select>
</mapper>